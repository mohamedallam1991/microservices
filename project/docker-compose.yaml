
# frontend service
# port number is 8085
services:

# broker service
# external address is 8082
  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8082:8082"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - microservices

# broker service
# external address is 8083
  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8083:8083"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - microservices
    # environment:
    #   - DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

# postgress servoce
# port number 5432
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "users", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    # environment:
    env_file:
      - .env
      # - POSTGRES_USER: postgres
      # - POSTGRES_PASSWORD: POSTGRES_PASSWORD
      # - POSTGRES_DB: users
    volumes:
      - ./db-data/postgress/:/var/lib/postgresql/data
    networks:
      - microservices

  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    ports:
      - "8084:8084"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - microservices

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - .env
    volumes:
      - ./db-data/mongo/:/data/db

networks:
  microservices:
      driver: bridge
